{
	"env": {
		"browser": true,
		"es2021": true
	},
	"extends": [
		"eslint:recommended",
		"standard",
		"plugin:@typescript-eslint/recommended",
		"plugin:react/recommended",
		"plugin:import/recommended",
		"plugin:import/typescript",
		"plugin:n/recommended",
		"plugin:promise/recommended",
		"prettier"
	],
	"settings": {
		"import/resolver": {
			"typescript": true,
			"node": true
		},
		"react": {
			"createClass": "createReactClass", // Regex for Component Factory to use,
			"pragma": "React", // Pragma to use, default to "React"
			"fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
			"version": "detect"
		}
	},
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": "latest",
		"sourceType": "module"
	},
	"plugins": ["@typescript-eslint", "react", "react-hooks", "prettier"],
	"rules": {
		"indent": ["error", "tab", { "SwitchCase": 1 }],
		"linebreak-style": ["error", "unix"],
		"quotes": ["error", "single"],
		"semi": ["error", "always"],
		"no-void": ["off"],
		"prefer-promise-reject-errors": ["off"],
		// react relation rules
		"react-hooks/rules-of-hooks": "error",
		"react-hooks/exhaustive-deps": "warn",
		"react/prop-types": "off",
		"react/jsx-uses-react": "off",
		"react/display-name": "off",
		"react/react-in-jsx-scope": "off",
		// typescript relation rules
		"@typescript-eslint/no-unnecessary-type-constraint": "off",
		"@typescript-eslint/no-explicit-any": [
			"warn",
			{
				"ignoreRestArgs": true
			}
		],
		"@typescript-eslint/no-extra-semi": ["warn"],
		"@typescript-eslint/no-empty-interface": ["off"],
		// no-use-before-define not work with typescript, so we need to use @typescript-eslint/no-use-before-define instead of it
		"no-use-before-define": "off",
		"@typescript-eslint/no-use-before-define": ["error"],
		// node relation rules
		"n/no-missing-import": ["off"],
		"n/no-extraneous-import": [
			"error",
			{
				"allowModules": ["vitest"]
				// "resolvePaths": ["node_modules"]
			}
		],
		"n/no-unpublished-import": ["off"],
		// promise relation rules
		"promise/no-return-wrap": ["error", { "allowReject": true }],
		"promise/always-return": ["error", { "ignoreLastCallback": true }]
	}
}
